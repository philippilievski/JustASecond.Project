@page "/"

<PageTitle>Index</PageTitle>

@using JustASecond.DAL.Data.ModelViews
@using JustASecond.DAL.Data.Models
@using JustASecond.DAL.Interfaces
@using JustASecond.Web.Data.ModelViews
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using JustASecond.Web.Pages.Shared
@inject NavigationManager Navigation
@inject IUnitOfWork unitOfWork

<link rel="stylesheet" href="/css/mainstyle.css">

<AuthorizeView>
    <Authorized>

        <div class="topnav">
            <a href="/">Orders</a>
            <a href="#">Tables</a>
            <a href="#">History</a>
            <form method="post" action="Identity/Account/LogOut">
                <button type="submit" class="linkbutton">Log out</button>
            </form>
        </div>
        <hr class="divider" />

        <div class="header">
            <h3>Orders</h3>
        </div>
        <hr class="divider" />

        @if (orders == null)
        {
            @*            <Spinner></Spinner>*@
            return;
        }
        else if (orders.Count() < 1)
        {
            <p>No orders found.</p>
            return;
        }
        <div class="order-container-header">
            <p>Time</p>
            <p>Table</p>
            <p>Details</p>
        </div>
        @foreach (var item in orders!)
        {
            <div class="order-container">
                <p>@item.CreatedDate</p>
                <hr>
                <p>@item.Table.Id</p>
                <hr>
                <button @onclick="() => OpenOrderDetails(item.Id)">Orderdetails</button>
            </div>
        }


        <div class="header">
            <h3>Calls</h3>
        </div>
        <hr class="divider" />

        @if (waiterCalls == null)
        {
            <h4>no calls...</h4>
        }
        else
        {
            <div class="order-container-header">
                <p>Time</p>
                <p>Table</p>
            </div>
            @foreach (var item in waiterCalls!)
            {
                <div class="order-container">
                    <p>@item.CalledAt</p>
                    <hr>
                    <p>@item.Table.Id</p>
                </div>
            }
        }
    </Authorized>
</AuthorizeView>

@code
{
    private IEnumerable<OrderPositionView> currentOrderPositions;
    private IEnumerable<Order> orders;
    private IEnumerable<JustASecond.DAL.Data.Models.WaiterCall> waiterCalls;

    public static bool FirstRendered { get; set; } = true;
    public static List<Table> Tables { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var principal = HttpContextAccessor.HttpContext!.User;
        var loggedInUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
        var user = await _userManager.FindByIdAsync(loggedInUserId);

        if (!principal.Identity!.IsAuthenticated)
        {
            Navigation.NavigateTo("loginpage");
        }

        if (FirstRendered)
        {
            FirstRendered = false;
            Tables = (await unitOfWork.OrderRepo.GetTables()).ToList();
        }

        orders = await unitOfWork.OrderRepo.GetAllPendingOrders();
        waiterCalls = await unitOfWork.WaiterRepo.GetWaiterCalls();
    }

    private void OpenOrderDetails(int orderId)
    {
        Navigation.NavigateTo($"orderDetail/{orderId}");
    }
}