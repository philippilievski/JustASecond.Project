@page "/basket/{OrderId:int}/{TableId:int}/{CustomerName}/{CustomerId:int}"
@using JustASecond.DAL.Interfaces
@using JustASecond.Web.Pages.Shared
@inject IUnitOfWork unitOfWork
@inject NavigationManager navigationManager

<link rel="stylesheet" href="/css/basket.css" />

<div class="page-container">
    <div class="top-container">
        <h3>Cart</h3>
    </div>
</div>

@if (Orderpositions == null || _order == null || _order.Sent)
{
    <Spinner></Spinner>
}
else if (Orderpositions.Count < 1)
{
    <p class="info-text text-divider">No products where added to your basket.</p>
}
else if (_order.Sent)
{
    <p class="info-text text-divider">Your order has already been placed.</p>
}
else if (Orderpositions != null && !_order.Sent)
{
    <div class="content-container">
        @foreach (var item in Orderpositions)
        {
            @if (@item.Product != null)
            {
                <div class="item-container">
                    <img src="/images/food/@item.Product.Image" />
                    <div class="description">
                        <p>@item.Product.Title</p>
                    </div>
                    <div class="amount-change">
                        <button class="btn-change" @onclick="async () => await LowerOrderPositionAmount(item.OrderId, item.Position, item.Amount)">-</button>
                        <input type="number" @bind-value="item.Amount" />
                        <button class="btn-change" @onclick="async () => await RaiseOrderPositionAmount(item.OrderId, item.Position, item.Amount)">+</button>
                    </div>
                    <div class="price">
                        <h4>@item.Product.Price</h4>
                    </div>
                </div>
            }
        }
    </div>
    <div class="divider"></div>
    <div class="footer-container">
        <div class="total">
            <p class="info-text">Total </p>
            @if (_order != null && total != null)
            {
                <p><span>@total</span></p>
            }
        </div>
        <button @onclick="PlaceOrder" disabled="@(_order == null || _order.OrderPositions.Count < 1 || _order.Sent)" class="btn-place-order">Place order</button>
    </div>
}

<div class="show-history-container">
    <p class="info-text">Show my history <input type="checkbox" value="@ShowHistoryFlag" @onclick="ShowHistory"></p>
</div>
@if (HistoryOrders != null && HistoryOrders.Count < 1)
{
    <p>No orders found in your history.</p>
}
else if (HistoryOrders != null)
{
    <div class="history-container">
        <h3>My history</h3>
        @foreach (var op in HistoryOrders)
        {
            @foreach (var item in op.OrderPositions)
            {
                <div class="item-container">
                    <img src="/images/food/@item.Product.Image" />
                    <div class="description">
                        <p>@item.Product.Title</p>
                    </div>
                    <div class="price">
                        <h4>@item.Product.Price</h4>
                    </div>
                </div>
            }
        }
    </div>
    <div class="big-divider"></div>
}

@code {
    [Parameter]
    public int OrderId { get; set; }
    [Parameter]
    public int TableId { get; set; }
    [Parameter]
    public int CustomerId { get; set; }
    [Parameter]
    public string CustomerName { get; set; }

    private Order _order;
    private List<OrderPosition> Orderpositions;
    private List<Order> HistoryOrders;
    private Customer Customer;
    private bool ShowHistoryFlag = false;
    private decimal? total = 0;

    protected async override Task OnInitializedAsync()
    {
        _order = await unitOfWork.OrderRepo.GetOrder(OrderId);
        Orderpositions = await unitOfWork.OrderRepo.GetOrderPositionsFromOrder(_order);
        Customer = await unitOfWork.CustomerRepo.GetCustomerById(CustomerId);
        total = CalcTotal();
    }

    private async Task RaiseOrderPositionAmount(int orderId, int position, int amount)
    {
        await unitOfWork.OrderRepo.SetOrderPositionAmount(orderId, position, amount + 1);
        total = CalcTotal();
        await unitOfWork.SaveChanges();
    }

    private async Task LowerOrderPositionAmount(int orderId, int position, int amount)
    {
        if (amount <= 1)
        {
            await unitOfWork.OrderRepo.RemoveOrderPosition(orderId, position);
            await unitOfWork.SaveChanges();
        }
        else
        {
            await unitOfWork.OrderRepo.SetOrderPositionAmount(orderId, position, amount - 1);
            await unitOfWork.SaveChanges();
        }
        Orderpositions = await unitOfWork.OrderRepo.GetOrderPositionsFromOrder(_order);
        total = CalcTotal();
    }

    private decimal? CalcTotal()
    {
        total = 0;
        foreach (var item in Orderpositions)
        {
            total += (item.Product.Price * item.Amount);
        }
        return total;
    }

    public async void PlaceOrder()
    {
        await unitOfWork.OrderRepo.SetOrderSent(_order.Id, true);
        await unitOfWork.SaveChanges();
        navigationManager.NavigateTo($"/confirmation/{TableId}/{CustomerName}/{CustomerId}");
    }

    private async Task ShowHistory()
    {
        if (ShowHistoryFlag == false)
        {
            HistoryOrders = await unitOfWork.OrderRepo.GetOrderHistoryFromCustomer(Customer);
            ShowHistoryFlag = true;
        }
        else
        {
            ShowHistoryFlag = false;
            HistoryOrders = null;
        }
    }
    }
