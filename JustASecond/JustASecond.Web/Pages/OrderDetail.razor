@page "/orderDetail/{OrderId:int}"
@using JustASecond.DAL.Interfaces
@using JustASecond.DAL.Repos
@using JustASecond.Web.Data.ModelViews
@using JustASecond.Web.Pages.Shared;
@inject IUnitOfWork unitOfWork
@inject NavigationManager navigationManager

<link rel="stylesheet" href="/css/mainstyle.css">

<div class="header">
    <h3>Order Detail</h3>
</div>
<hr class="divider" />

@if (orderPositions == null)
{
    <Spinner></Spinner>
    return;
}
else if (orderPositions.Count() < 1)
{
    <p>No order positions found.</p>
    return;
}

<div class="order-container-header">
    <p>#</p>
    <p>Product</p>
    <p>Amount</p>
    <p>Price</p>
    <p>Total</p>
</div>
@{
    int orderPositionDisplay = 0;
    @foreach (var item in orderPositions)
    {
        orderPositionDisplay++;
        <div class="order-container">
            <p>@orderPositionDisplay</p>
            <p>@item.Product.Title</p>
            <p>@item.Amount</p>
            <p>@item.Product.Price</p>
            <p>@item.Total</p>
        </div>
    }
}

<div class="complete-order-container">
    <button @onclick="async () => await CompleteOrder(OrderId)">Complete</button>
</div>

@code {
    private IEnumerable<OrderPositionView> orderPositions;

    [Parameter]
    public int OrderId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        orderPositions = await unitOfWork.OrderRepo.GetAllPositionsFromOrder(OrderId);
    }

    private async Task CompleteOrder(int orderId)
    {
        await unitOfWork.OrderRepo.SetOrderCompleted(orderId, DateTime.Now);
        await unitOfWork.SaveChanges();
        navigationManager.NavigateTo("/");
    }
}
