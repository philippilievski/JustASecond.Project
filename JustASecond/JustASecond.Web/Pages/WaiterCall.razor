@using JustASecond.DAL.Data.Models
@using JustASecond.DAL.Interfaces
@inject IUnitOfWork unitOfWork


@page "/waitercall/{tableID:int}/{_name}"

<link rel="stylesheet" href="/css/waitercall.css" />

@if(_products == null || _products.Count <= 0)
{
    <p><em>No Products avaliable</em></p>
}
else
{
    <div class="page-container">
        <div class="top-container">
            <h2>Hello, @_name!</h2>
        </div>

        @foreach(var item in _products)
        {
            <div class="menu-container">
                <div class="food-card">
                    <div class="card-image">
                        <img src="/images/food/@item.Image" />
                    </div>
                    <div class="card-description">
                        <h2>@item.Title</h2>
                        <p class="info-text">@item.Description</p>
                    </div>
                    <div class="card-price">
                        <button @onclick="() => AddToCart(item)" class="@_btncolorstyle">Add to cart</button>
                        <h3>@item.Price$</h3>
                    </div>
                </div>
            </div>
        }
        <div class="divider-container">

        </div>

        <div class="bottom-container">
            <button @onclick="CallWaiter" class="btn-bottom-navbar @_btncolorstyle">Waiter<i class="fa fa-bell-o" aria-hidden="true"></i></button>
            <button @onclick="GoToBasket" class="btn-bottom-navbar"><i class="fa fa-shopping-cart" aria-hidden="true"></i></button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int tableID { get; set; }
    [Parameter]
    public string _name { get; set; }

    private List<Product> _products;
    private Order _order;
    private string _added;
    private int _highestpositionnr;
    private int _orderid;

    private string _btncolorstyle;

    protected async override Task OnInitializedAsync()
    {
        _products = (await unitOfWork.ProductRepo.GetAllProducts()).ToList();
        _orderid = await GetHighestOrderID();
        _order = new Order
            {
                CreatedDate = DateTime.Now,
                Id = _orderid
            };
        await unitOfWork.OrderRepo.AddOrder(_order);
        
    }

    private async void AddToCart(Product product)
    {
        _highestpositionnr = await GetHighestPositionNR(_order);
        _order.OrderPositions.Add(new OrderPosition
            {
                Amount = 1,
                Position = _highestpositionnr,
                Product = product
            });
    }

    private async Task<int> GetHighestOrderID()
    {
        var _highestorderid = await unitOfWork.OrderRepo.GetHighestOrderID() +1;
        return _highestorderid;
    }

    private async Task<int> GetHighestPositionNR(Order _order)
    {
        _highestpositionnr = await unitOfWork.OrderRepo.GetHighestPositionFromOrderposition(_order) + 1;
        return _highestpositionnr;
    }

    private async void GoToBasket()
    {
        await unitOfWork.OrderRepo.AddOrder(_order);
    }

    private void CallWaiter()
    {
        //Index.tables[Index.tables.FindIndex(t => t.Id == tableID)].HasCalled = true;
        _btncolorstyle = "btn-successfull";
    }
}
