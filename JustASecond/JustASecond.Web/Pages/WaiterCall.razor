@page "/waitercall/{tableID:int}/{_name}/{_customerId:int}"
@using JustASecond.DAL.Data.Models
@using JustASecond.DAL.Interfaces
@using JustASecond.Web.Pages.Shared
@inject IUnitOfWork unitOfWork
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="/css/waitercall.css" />

<div class="page-container">
    <div class="top-container">
        <h2>Hello, @_name!</h2>
    </div>

    @if (_products == null)
    {
        <Spinner></Spinner>
    }
    else if (_products.Count < 1)
    {
        <p>No products found.</p>
    }
    else
    {
        <div class="page-container">
            @foreach (var item in _products)
            {
                <div class="menu-container">
                    <div class="food-card">
                        <div class="card-image">
                            <img src="/images/food/@item.Image" />
                        </div>
                        <div class="card-description">
                            <h2>@item.Title</h2>
                            <p class="info-text">@item.Description</p>
                        </div>
                        <div class="card-price">
                            <button @onclick="() => AddToCart(item)"><span>Add to cart</span></button>
                            <h3>@item.Price</h3>
                        </div>
                    </div>
                </div>
            }
            <div class="divider-container">
            </div>

        <div class="bottom-container">
            <button @onclick="CallWaiter" class="btn-bottom-navbar">Waiter <i class="fa fa-bell-o" aria-hidden="true"></i></button>
            <button @onclick="GoToBasket" class="btn-bottom-navbar"><i class="fa fa-shopping-cart" aria-hidden="true"></i></button>
        </div>
    </div>
}
</div>
@code {
    [Parameter]
    public int tableID { get; set; }
    [Parameter]
    public string _name { get; set; }
    [Parameter]
    public int _customerId { get; set; }

    private Table _table;
    private List<Product> _products;
    private Order _order;
    private Customer _customer;
    private JustASecond.DAL.Data.Models.WaiterCall _waiterCall;

    private string _added;
    private int? _highestpositionnr;

    protected async override Task OnInitializedAsync()
    {
        _table = await unitOfWork.OrderRepo.GetTableByID(tableID);
        _products = (await unitOfWork.ProductRepo.GetAllProducts()).ToList();
        _customer = await unitOfWork.CustomerRepo.GetCustomerById(_customerId);
        await InitializeOrder();
        await unitOfWork.SaveChanges();
    }

    
    ///Fügt dem Warenkorb ein Produkt hinzu
    private async void AddToCart(Product product)
    {
        await InitializeOrder();
        await unitOfWork.SaveChanges();

        // Neue OrderPosition -> OrderPositionNr um 1 erhöhen
        _highestpositionnr = await unitOfWork.OrderRepo.GetHighestPositionFromOrderposition(_order) + 1;

        var foundOrderPosition = await unitOfWork.OrderRepo.GetOrderPositionFromProductId(_order.Id, product.Id);
        if (foundOrderPosition != null)
        {
            // OrderPosition in Order bereits mit selben Produkt vorhanden -> Menge um 1 erhöhen
            foundOrderPosition.Amount += 1;
        }
        else
        {
            _order.OrderPositions.Add(new OrderPosition
                {
                    Amount = 1,
                    Position = (int)_highestpositionnr,
                    Product = product,
                    Order = _order
                });
        }

        await unitOfWork.SaveChanges();
    }

    private async Task InitializeOrder()
    {
        // Order bereits vorhanden -> OrderPosition zum Vorhandenen hinzufügen
        _order = await unitOfWork.CustomerRepo.GetPendingOrderFromCustomer(_customer);

        if (_order == null)
        {
            _order = new Order
                {
                    CreatedDate = DateTime.Now,
                    Table = _table,
                    Customer = _customer,
                    OrderPositions = new List<OrderPosition>()
                };
            await unitOfWork.OrderRepo.AddOrder(_order);
        }
    }

    private void GoToBasket()
    {
        if (_order != null)
        {
            NavigationManager.NavigateTo($"/basket/{_order.Id}/{tableID}/{_name}/{_customerId}");
        }
    }

    private async void CallWaiter()
    {
        _waiterCall = new JustASecond.DAL.Data.Models.WaiterCall
            {
                CalledAt = DateTime.Now,
                Table = _table
            };
        await unitOfWork.WaiterRepo.AddWaiterCall(_waiterCall);
        await unitOfWork.SaveChanges();
    }
}
